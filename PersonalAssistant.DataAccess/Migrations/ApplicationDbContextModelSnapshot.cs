// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalAssistant.DataAccess.Context;

namespace PersonalAssistant.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PreferredDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("TopicName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("ExecutorId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentTypeId = 9,
                            CreationDate = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(9190),
                            CreatorId = 2,
                            Details = @"<p>Написати програму послідовного та паралельного <strong>Розв'язування системи лінійних алгебраїчних рівнянь методом Гауса.</strong></p>
                                    <p>Програма повинна задовольняти наступні вимоги:</p>
                                    <ul>
                                    <li>Порахувати час виконання обох видів алгоритмів;</li>
                                    <li>Розміри матриці &gt;=100;</li>
                                    <li>Обчислити прискорення;</li>
                                    <li>Обчислити ефективність паралельних обчислень.</li>
                                    </ul>
                                    <p><strong>Питання:</strong> <em>Як образувати прискорення?</em></p>",
                            DisciplineId = 4,
                            PreferredDeadline = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(8957)
                        },
                        new
                        {
                            Id = 2,
                            AssignmentTypeId = 11,
                            CreationDate = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(9676),
                            CreatorId = 1,
                            Details = @"<p>Написати програму послідовного та паралельного <strong>множення матриць</strong>.&nbsp;</p>
                                    <p>Програма повинна задовольняти наступні вимоги:</p>
                                    <ul>
                                    <li>Порахувати час виконання обох видів алгоритмів;</li>
                                    <li>Розміри матриці &gt;=500;</li>
                                    <li>Обчислити прискорення;</li>
                                    <li>Обчислити ефективність паралельних обчислень.</li>
                                    </ul>
                                    <p><strong>Питання</strong>: <em>Яка найоптимальніша кількість потоків потрібна для множення матриць?</em></p>",
                            DisciplineId = 4,
                            PreferredDeadline = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(9661)
                        },
                        new
                        {
                            Id = 3,
                            AssignmentTypeId = 3,
                            CreationDate = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(9710),
                            CreatorId = 1,
                            Details = @"<p>Потрібно написати ессе на тему <strong><em> 'How computer technologies can help in learning English'</em></strong></p>
                                    <p><strong>Запитання:</strong></p>
                                    <ul>
                                    <li><strong> </strong>Яка структура ессе повинна бути?</li>
                                    <li>Також було б добре отримати посилання на джерела які допоможуть у написанні ессе.</li>
                                    </ul>",
                            DisciplineId = 1,
                            PreferredDeadline = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(9708)
                        });
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.AssignmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssignmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Реферат"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Доповідь"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ессе"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Стаття"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Контрольна робота"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Відповіді на запитання"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Бізнес план"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Переклад"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Лабораторна робота"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Презентація"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Домашнє завдання"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Розв'язання задач"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Рецензія"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Анотація"
                        });
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = 3,
                            Content = @"<p><em><strong>Загальна структура ессе:</strong></em></p>
                                    <ol>
                                    <li><strong>Лаконічність </strong>викладу матеріалу. Нарис має бути аргументованим та переконливим. Всі аргументи &ndash; підтвердженими та перевіреними.</li>
                                    <li><strong>Оригінальність</strong>. Під час оформлення есе категорично забороняється використання чужих робіт, їх повне або часткове копіювання.</li>
                                    <li>Забороняється використовувати в текстах сленг чи ненормативну лексику, вислови, що пропагують ворожнечу, шкідливі звички чи насильство.</li>
                                    <li>Есе має містити проведений автором аналіз проблеми, суб&rsquo;єктивну авторську позицію (в цілому під час оформлення есе головне розкрити і проблему, і особистість автора та його світогляд).</li>
                                    <li>Есе має складатись з таких частин: <strong>вступ </strong>(опис тези),<strong> аргументи або основна частина</strong> (підтвердження або спростування тези за допомогою цитат, прикладів з життя, історичних подій, законів та актів), <strong>висновок </strong>(остаточна позиція автора щодо конкретного питання).</li>
                                    </ol>",
                            CreationDate = new DateTime(2021, 12, 19, 14, 36, 36, 968, DateTimeKind.Local).AddTicks(2591),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            AssignmentId = 3,
                            Content = @"<p>Проаналізуйте наступні ресурси для написання ессе:</p>
                                    <ol>
                                    <li>Use of computer technology for English language learning: do learning styles, gender, and age matter? https://www.tandfonline.com/doi/abs/10.1080/09588221.2016.1140655?journalCode=ncal20 </li>
                                    <li> THE ROLE OF COMPUTER TECHNOLOGY IN TEACHING ENGLISH LANGUAGE https://www.researchgate.net/publication/316912447_THE_ROLE_OF_COMPUTER_TECHNOLOGY_IN_TEACHING_ENGLISH_LANGUAGE </li>
                                    </ol>
                                    <p><strong> Тут описані плюси та мінуси використання компютерних технологій для вивчення мов.</strong></p>
                                    <p> &nbsp;</p> ",
                            CreationDate = new DateTime(2021, 12, 19, 14, 36, 36, 968, DateTimeKind.Local).AddTicks(3083),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Aнглійська мова"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Німецька мова"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Біологія"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Інформатика"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Хімія"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Географія"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Економіка"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Журналістика"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Лабораторна робота"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Історія"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Педагогіка"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Політологія"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Правознавство"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Програмування"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Психологія"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Музика"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Українська література"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Медицина"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Філософія"
                        });
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Files");
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ParentMessageId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeletedBy = 0,
                            EditedBy = 0,
                            RoomId = 1,
                            SenderId = 1,
                            SentAt = new DateTime(2021, 12, 19, 14, 36, 36, 965, DateTimeKind.Local).AddTicks(2784),
                            Text = "Привіт! Потрібно написати ессе на тему 'How computer technologies can help in learning English' Чи є в тебе посилання на джерела які допоможуть мені у написанні ессе?",
                            Type = "Text"
                        },
                        new
                        {
                            Id = 2,
                            DeletedBy = 0,
                            EditedBy = 0,
                            RoomId = 1,
                            SenderId = 2,
                            SentAt = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(2846),
                            Text = "Привіт! Переглянь спочатку наступну статтю: Use of computer technology for English language learning: do learning styles, gender, and age matter? https://www.tandfonline.com/doi/abs/10.1080/09588221.2016.1140655?journalCode=ncal20",
                            Type = "Text"
                        },
                        new
                        {
                            Id = 3,
                            DeletedBy = 0,
                            EditedBy = 0,
                            RoomId = 1,
                            SenderId = 2,
                            SentAt = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(2890),
                            Text = "Також наступна стаття містить описані плюси та мінуси використання компютерних технологій для вивчення мов: https://www.researchgate.net/publication/316912447_THE_ROLE_OF_COMPUTER_TECHNOLOGY_IN_TEACHING_ENGLISH_LANGUAGE",
                            Type = "Text"
                        },
                        new
                        {
                            Id = 4,
                            DeletedBy = 0,
                            EditedBy = 0,
                            RoomId = 1,
                            SenderId = 1,
                            SentAt = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(2896),
                            Text = "Супер, дякую!",
                            Type = "Text"
                        },
                        new
                        {
                            Id = 5,
                            DeletedBy = 0,
                            EditedBy = 0,
                            RoomId = 1,
                            SenderId = 1,
                            SentAt = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(2899),
                            Text = "Наступне питання: Яка загальна структура ессе повинна бути? ",
                            Type = "Text"
                        },
                        new
                        {
                            Id = 6,
                            DeletedBy = 0,
                            EditedBy = 0,
                            RoomId = 1,
                            SenderId = 2,
                            SentAt = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(2907),
                            Text = "Тут складно пояснити коротко. Загалом есе має складатись з таких частин: вступ (опис тези), аргументи або основна частина (підтвердження або спростування тези за допомогою цитат, прикладів з життя, історичних подій, законів та актів), висновок (остаточна позиція автора щодо конкретного питання). Більш детально можна глянути за наступним посиланням: http://csbc.edu.ua/documents/news/691_3.pdf",
                            Type = "Text"
                        },
                        new
                        {
                            Id = 7,
                            DeletedBy = 0,
                            EditedBy = 0,
                            RoomId = 1,
                            SenderId = 1,
                            SentAt = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(2910),
                            Text = "Переглянув. Це те що треба, дякую!",
                            Type = "Text"
                        },
                        new
                        {
                            Id = 8,
                            DeletedBy = 0,
                            EditedBy = 0,
                            RoomId = 1,
                            SenderId = 2,
                            SentAt = new DateTime(2021, 12, 19, 14, 36, 36, 967, DateTimeKind.Local).AddTicks(2914),
                            Text = "Будь ласка!",
                            Type = "Text"
                        });
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConversationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConversationType = "User",
                            RoomType = "Public"
                        },
                        new
                        {
                            Id = 2,
                            ConversationType = "Group",
                            Name = "Інформатика",
                            OwnerId = 3,
                            RoomType = "Public"
                        },
                        new
                        {
                            Id = 3,
                            ConversationType = "Group",
                            Name = "Іноземна мова",
                            OwnerId = 1,
                            RoomType = "Public"
                        },
                        new
                        {
                            Id = 4,
                            ConversationType = "Group",
                            Name = "Програмування",
                            OwnerId = 1,
                            RoomType = "Public"
                        },
                        new
                        {
                            Id = 5,
                            ConversationType = "Group",
                            Name = "Українська мова",
                            OwnerId = 1,
                            RoomType = "Public"
                        },
                        new
                        {
                            Id = 6,
                            ConversationType = "Group",
                            Name = "Математика",
                            OwnerId = 1,
                            RoomType = "Private"
                        },
                        new
                        {
                            Id = 7,
                            ConversationType = "Group",
                            Name = "Фізика",
                            OwnerId = 1,
                            RoomType = "Protected"
                        },
                        new
                        {
                            Id = 8,
                            ConversationType = "Group",
                            Name = "Хімія",
                            OwnerId = 1,
                            RoomType = "Public"
                        });
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.UserRoom", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            UserId = 1,
                            Scope = "Admin"
                        },
                        new
                        {
                            RoomId = 1,
                            UserId = 2,
                            Scope = "Participant"
                        },
                        new
                        {
                            RoomId = 2,
                            UserId = 1,
                            Scope = "Admin"
                        },
                        new
                        {
                            RoomId = 2,
                            UserId = 2,
                            Scope = "Participant"
                        },
                        new
                        {
                            RoomId = 2,
                            UserId = 3,
                            Scope = "Admin"
                        },
                        new
                        {
                            RoomId = 3,
                            UserId = 1,
                            Scope = "Owner"
                        },
                        new
                        {
                            RoomId = 4,
                            UserId = 1,
                            Scope = "Owner"
                        },
                        new
                        {
                            RoomId = 5,
                            UserId = 1,
                            Scope = "Owner"
                        },
                        new
                        {
                            RoomId = 6,
                            UserId = 1,
                            Scope = "Owner"
                        },
                        new
                        {
                            RoomId = 7,
                            UserId = 1,
                            Scope = "Owner"
                        },
                        new
                        {
                            RoomId = 8,
                            UserId = 1,
                            Scope = "Owner"
                        });
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "b0256264-6704-427e-98be-fcc6f7d53903",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "bac984a5-413f-4949-a81d-9782faca4894",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "dcebf646-b4d2-4938-92b7-3f954ad29c72",
                            Name = "Assistant",
                            NormalizedName = "ASSISTANT"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "b09bf5c7-5adf-449b-bc58-f22ca3fd6624",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AvatarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationalInstitutionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationalInstitutionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AvatarId = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4d3d56f9-ac14-42c3-a0aa-be9d27d655ba",
                            Email = "ivan.freiuk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Іван",
                            LastName = "Фреюк",
                            LockoutEnabled = false,
                            NormalizedUserName = "IVAN.FREIUK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGkUAajNwi+WT/q/pYumDvmpRoEf6LjbmDFbd3mnrfRUsG8DpfHn/bhYH7ZL4AbmWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc605458-665d-41fc-b1ad-3b23ac94c9b5",
                            TwoFactorEnabled = false,
                            UserName = "ivan.freiuk@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            AvatarId = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "35a9092c-090a-4607-bd39-164a05484eda",
                            Email = "serhii.romanov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Сергій",
                            LastName = "Романов",
                            LockoutEnabled = false,
                            NormalizedUserName = "SERHII.ROMANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMLSkALVVJz+C1xMSmUdDJr5SWrdRBmf2jDUYbhkaN07IERHHZeRjHpHTBQNL3mFHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5aced4b8-0e99-42ec-9849-1cc8cfd83d74",
                            TwoFactorEnabled = false,
                            UserName = "serhii.romanov@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            AvatarId = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ba9db9b8-4731-4d24-85b2-a1394fde28d3",
                            Email = "artem.bohdan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Артем",
                            LastName = "Богдан",
                            LockoutEnabled = false,
                            NormalizedUserName = "ARTEM.BOHDAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL+6/8IN6J6SbuGDSDzRt8Gv17SF+wI4yEa1qOlVox0+9FDJqbsx8oZrikDf7TV79Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc3171b5-2acf-4a00-9e90-1499241918da",
                            TwoFactorEnabled = false,
                            UserName = "artem.bohdan@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            AvatarId = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4f0ede67-d1ef-47fd-8318-3d868340adc0",
                            Email = "roman.halas@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Роман",
                            LastName = "Галас",
                            LockoutEnabled = false,
                            NormalizedUserName = "ROMAN.HALAS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKcMZVBPVsMEK5gNg0Pqdv090cZmNwpsbR0s/OJodzxa2KYQZm81cCh7GbVR9VA70Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1ab5780-f3c8-45d9-a858-b6af84a44813",
                            TwoFactorEnabled = false,
                            UserName = "roman.halas@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            AvatarId = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c3325b17-1107-4d8e-bdd3-cd204cad0cde",
                            Email = "nazar.homeniuk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Назар",
                            LastName = "Гоменюк",
                            LockoutEnabled = false,
                            NormalizedUserName = "NAZAR.HOMENIUK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN/pPLuZyRGlvCAOL5uYKWQHp7zAc1wvc7fCwoQitFhC9+OmTjZi56KCBufTr7VE2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35859150-3456-4e0f-9f15-8c14e9848801",
                            TwoFactorEnabled = false,
                            UserName = "nazar.homeniuk@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            AvatarId = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4a79f0b9-6998-4e0e-9a27-ed631107437d",
                            Email = "petro.luzan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Петро",
                            LastName = "Лузан",
                            LockoutEnabled = false,
                            NormalizedUserName = "PETRO.LUZAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPe79Rn1XrNMnol901iJG1dJ3kKUJyMuL8FPEn24iP8kx+Lz/8i/J4pTpdPaBaRguA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "510d9ca1-ccfd-47b5-863e-7440cf4c966d",
                            TwoFactorEnabled = false,
                            UserName = "petro.luzan@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PersonalAssistant.DataAccess.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PersonalAssistant.DataAccess.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PersonalAssistant.DataAccess.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("PersonalAssistant.DataAccess.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalAssistant.DataAccess.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PersonalAssistant.DataAccess.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.Assignment", b =>
                {
                    b.HasOne("PersonalAssistant.DataAccess.Entities.AssignmentType", "AssignmentType")
                        .WithMany("Assignments")
                        .HasForeignKey("AssignmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PersonalAssistant.DataAccess.Identity.User", "Creator")
                        .WithMany("CreatorAssignments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PersonalAssistant.DataAccess.Entities.Discipline", "Discipline")
                        .WithMany("Assignments")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PersonalAssistant.DataAccess.Identity.User", "Executor")
                        .WithMany("ExecutorAssignments")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.Comment", b =>
                {
                    b.HasOne("PersonalAssistant.DataAccess.Entities.Assignment", "Assignment")
                        .WithMany("Comments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalAssistant.DataAccess.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.File", b =>
                {
                    b.HasOne("PersonalAssistant.DataAccess.Entities.Assignment", "Assignment")
                        .WithMany("Files")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalAssistant.DataAccess.Identity.User", "User")
                        .WithOne("Avatar")
                        .HasForeignKey("PersonalAssistant.DataAccess.Entities.File", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("PersonalAssistant.DataAccess.Entities.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PersonalAssistant.DataAccess.Identity.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.Room", b =>
                {
                    b.HasOne("PersonalAssistant.DataAccess.Identity.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("PersonalAssistant.DataAccess.Entities.UserRoom", b =>
                {
                    b.HasOne("PersonalAssistant.DataAccess.Entities.Room", "Room")
                        .WithMany("UserRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PersonalAssistant.DataAccess.Identity.User", "User")
                        .WithMany("UserRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
